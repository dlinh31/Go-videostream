// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: proto/videostream.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VideoStreamService_ListVideos_FullMethodName       = "/videostream.VideoStreamService/ListVideos"
	VideoStreamService_GetVideoMetaData_FullMethodName = "/videostream.VideoStreamService/GetVideoMetaData"
	VideoStreamService_StreamVideo_FullMethodName      = "/videostream.VideoStreamService/StreamVideo"
	VideoStreamService_CreateWatchParty_FullMethodName = "/videostream.VideoStreamService/CreateWatchParty"
	VideoStreamService_JoinWatchParty_FullMethodName   = "/videostream.VideoStreamService/JoinWatchParty"
	VideoStreamService_SyncPlayback_FullMethodName     = "/videostream.VideoStreamService/SyncPlayback"
)

// VideoStreamServiceClient is the client API for VideoStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoStreamServiceClient interface {
	ListVideos(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*VideoList, error)
	GetVideoMetaData(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (*VideoMetadata, error)
	StreamVideo(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VideoChunk], error)
	CreateWatchParty(ctx context.Context, in *CreatePartyRequest, opts ...grpc.CallOption) (*PartyResponse, error)
	JoinWatchParty(ctx context.Context, in *JoinPartyRequest, opts ...grpc.CallOption) (*PartyResponse, error)
	SyncPlayback(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PlaybackCommand, PlaybackCommand], error)
}

type videoStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoStreamServiceClient(cc grpc.ClientConnInterface) VideoStreamServiceClient {
	return &videoStreamServiceClient{cc}
}

func (c *videoStreamServiceClient) ListVideos(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*VideoList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoList)
	err := c.cc.Invoke(ctx, VideoStreamService_ListVideos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoStreamServiceClient) GetVideoMetaData(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (*VideoMetadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoMetadata)
	err := c.cc.Invoke(ctx, VideoStreamService_GetVideoMetaData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoStreamServiceClient) StreamVideo(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VideoChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VideoStreamService_ServiceDesc.Streams[0], VideoStreamService_StreamVideo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[VideoRequest, VideoChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VideoStreamService_StreamVideoClient = grpc.ServerStreamingClient[VideoChunk]

func (c *videoStreamServiceClient) CreateWatchParty(ctx context.Context, in *CreatePartyRequest, opts ...grpc.CallOption) (*PartyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PartyResponse)
	err := c.cc.Invoke(ctx, VideoStreamService_CreateWatchParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoStreamServiceClient) JoinWatchParty(ctx context.Context, in *JoinPartyRequest, opts ...grpc.CallOption) (*PartyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PartyResponse)
	err := c.cc.Invoke(ctx, VideoStreamService_JoinWatchParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoStreamServiceClient) SyncPlayback(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PlaybackCommand, PlaybackCommand], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VideoStreamService_ServiceDesc.Streams[1], VideoStreamService_SyncPlayback_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PlaybackCommand, PlaybackCommand]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VideoStreamService_SyncPlaybackClient = grpc.BidiStreamingClient[PlaybackCommand, PlaybackCommand]

// VideoStreamServiceServer is the server API for VideoStreamService service.
// All implementations must embed UnimplementedVideoStreamServiceServer
// for forward compatibility.
type VideoStreamServiceServer interface {
	ListVideos(context.Context, *NoParam) (*VideoList, error)
	GetVideoMetaData(context.Context, *VideoRequest) (*VideoMetadata, error)
	StreamVideo(*VideoRequest, grpc.ServerStreamingServer[VideoChunk]) error
	CreateWatchParty(context.Context, *CreatePartyRequest) (*PartyResponse, error)
	JoinWatchParty(context.Context, *JoinPartyRequest) (*PartyResponse, error)
	SyncPlayback(grpc.BidiStreamingServer[PlaybackCommand, PlaybackCommand]) error
	mustEmbedUnimplementedVideoStreamServiceServer()
}

// UnimplementedVideoStreamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVideoStreamServiceServer struct{}

func (UnimplementedVideoStreamServiceServer) ListVideos(context.Context, *NoParam) (*VideoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVideos not implemented")
}
func (UnimplementedVideoStreamServiceServer) GetVideoMetaData(context.Context, *VideoRequest) (*VideoMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoMetaData not implemented")
}
func (UnimplementedVideoStreamServiceServer) StreamVideo(*VideoRequest, grpc.ServerStreamingServer[VideoChunk]) error {
	return status.Errorf(codes.Unimplemented, "method StreamVideo not implemented")
}
func (UnimplementedVideoStreamServiceServer) CreateWatchParty(context.Context, *CreatePartyRequest) (*PartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWatchParty not implemented")
}
func (UnimplementedVideoStreamServiceServer) JoinWatchParty(context.Context, *JoinPartyRequest) (*PartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinWatchParty not implemented")
}
func (UnimplementedVideoStreamServiceServer) SyncPlayback(grpc.BidiStreamingServer[PlaybackCommand, PlaybackCommand]) error {
	return status.Errorf(codes.Unimplemented, "method SyncPlayback not implemented")
}
func (UnimplementedVideoStreamServiceServer) mustEmbedUnimplementedVideoStreamServiceServer() {}
func (UnimplementedVideoStreamServiceServer) testEmbeddedByValue()                            {}

// UnsafeVideoStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoStreamServiceServer will
// result in compilation errors.
type UnsafeVideoStreamServiceServer interface {
	mustEmbedUnimplementedVideoStreamServiceServer()
}

func RegisterVideoStreamServiceServer(s grpc.ServiceRegistrar, srv VideoStreamServiceServer) {
	// If the following call pancis, it indicates UnimplementedVideoStreamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VideoStreamService_ServiceDesc, srv)
}

func _VideoStreamService_ListVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoStreamServiceServer).ListVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoStreamService_ListVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoStreamServiceServer).ListVideos(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoStreamService_GetVideoMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoStreamServiceServer).GetVideoMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoStreamService_GetVideoMetaData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoStreamServiceServer).GetVideoMetaData(ctx, req.(*VideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoStreamService_StreamVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VideoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VideoStreamServiceServer).StreamVideo(m, &grpc.GenericServerStream[VideoRequest, VideoChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VideoStreamService_StreamVideoServer = grpc.ServerStreamingServer[VideoChunk]

func _VideoStreamService_CreateWatchParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoStreamServiceServer).CreateWatchParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoStreamService_CreateWatchParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoStreamServiceServer).CreateWatchParty(ctx, req.(*CreatePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoStreamService_JoinWatchParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoStreamServiceServer).JoinWatchParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoStreamService_JoinWatchParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoStreamServiceServer).JoinWatchParty(ctx, req.(*JoinPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoStreamService_SyncPlayback_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VideoStreamServiceServer).SyncPlayback(&grpc.GenericServerStream[PlaybackCommand, PlaybackCommand]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VideoStreamService_SyncPlaybackServer = grpc.BidiStreamingServer[PlaybackCommand, PlaybackCommand]

// VideoStreamService_ServiceDesc is the grpc.ServiceDesc for VideoStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "videostream.VideoStreamService",
	HandlerType: (*VideoStreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVideos",
			Handler:    _VideoStreamService_ListVideos_Handler,
		},
		{
			MethodName: "GetVideoMetaData",
			Handler:    _VideoStreamService_GetVideoMetaData_Handler,
		},
		{
			MethodName: "CreateWatchParty",
			Handler:    _VideoStreamService_CreateWatchParty_Handler,
		},
		{
			MethodName: "JoinWatchParty",
			Handler:    _VideoStreamService_JoinWatchParty_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamVideo",
			Handler:       _VideoStreamService_StreamVideo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SyncPlayback",
			Handler:       _VideoStreamService_SyncPlayback_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/videostream.proto",
}
